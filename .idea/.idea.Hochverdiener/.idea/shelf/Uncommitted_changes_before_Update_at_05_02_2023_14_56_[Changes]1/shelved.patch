Index: Hochverdiener/Program.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>using Discord;\r\nusing Discord.WebSocket;\r\nusing Hochverdiener.keys;\r\n\r\nnamespace Hochverdiener\r\n{\r\n    public class Program\r\n    {\r\n        public static Task Main(string[] args) => new Program().MainAsync();\r\n        public static DiscordSocketClient? Client;\r\n\r\n        private Task Log(LogMessage msg)\r\n        {\r\n            Console.WriteLine(msg.ToString());\r\n            return Task.CompletedTask;\r\n        }\r\n\r\n\r\n        private async Task MainAsync()\r\n        {\r\n            Client = new DiscordSocketClient();\r\n\r\n            Client.Log += Log;\r\n\r\n            var token = Token.devBotCSharp;\r\n            await Client.LoginAsync(TokenType.Bot, token);\r\n            await Client.StartAsync();\r\n            Client.Ready += Client_Ready;\r\n            Client.SlashCommandExecuted += SlashCommand;\r\n\r\n            await Task.Delay(-1);\r\n        }\r\n\r\n#pragma warning disable CS1998\r\n        private async Task Client_Ready()\r\n#pragma warning restore CS1998\r\n        {\r\n            BaseCommand.Init();\r\n        }\r\n\r\n        private async Task SlashCommand(SocketSlashCommand command)\r\n        {\r\n            foreach (var c in BaseCommand.Commands)\r\n            {\r\n\r\n                if (c.Name == command.Data.Name || c.Aliases != null && c.Aliases.Contains(command.Data.Name))\r\n                {\r\n                    await c.Execute(command);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Hochverdiener/Program.cs b/Hochverdiener/Program.cs
--- a/Hochverdiener/Program.cs	
+++ b/Hochverdiener/Program.cs	
@@ -1,6 +1,6 @@
 using Discord;
 using Discord.WebSocket;
-using Hochverdiener.keys;
+using Hochverdiener_3._0;
 
 namespace Hochverdiener
 {
